# Random split analysis
This analysis compare the consistency of different methods by randomly splitting each library into two equal parts and predicting translated ORFs.

## Randomly split a genome/transcriptome bam file into two halfs with equal number of reads
```{bash}
# split bam
for i in /nfs_data/zhangh/ncorf_benchmark/benchmark/*RPF*.Aligned.sortedByCoord.out.bam /nfs_data/zhangh/ncorf_benchmark/benchmark/*RPF*.Aligned.toTranscriptome.out.bam ; do j=$(basename $i) ; echo "python /home/admin/scripts/bam_split.py $i -p split_data/${j%%.bam}" ; done > 01_split_bam.sh

# split sam
for i in /nfs_data/zhangh/ncorf_benchmark/benchmark/*RPF*.hisat2.sam ; do j=$(basename $i) ; echo "python sam_split.py $i -p split_data/${j%%.hisat2.sam}" ; done > 01_split_sam.sh

# index alignment files
for i in split_data/*.Aligned.sortedByCoord.out.*.bam ; do echo " samtools index $i " ; done > 01_genome_index.sh
```

## ORF prediction
### Ribo-TISH
```{bash}
## /nfs_data/zhangh/ncorf_benchmark/benchmark/*RPF*.Aligned.sortedByCoord.out.bam
for i in split_data/human*.Aligned.sortedByCoord.out.*.bam ; do echo "ribotish quality -b $i -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf" ; done > 02_ribotish_quality.sh
for i in split_data/mouse*.Aligned.sortedByCoord.out.*.bam ; do echo "ribotish quality -b $i -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf" ; done >> 02_ribotish_quality.sh

for i in split_data/human*.Aligned.sortedByCoord.out.*.bam ; do j=$(basename $i) ; echo "ribotish predict -p4 --minaalen 5 --alt --altcodons CTG,GTG,TTG --framebest --fsqth 0.05 -b $i -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa -o ribotish/${j%%.bam}_pred.txt" ; done > 02_ribotish_predict.sh
for i in  split_data/mouse*.Aligned.sortedByCoord.out.*.bam ; do j=$(basename $i) ; echo "ribotish predict -p4 --minaalen 5 --alt --altcodons CTG,GTG,TTG --framebest --fsqth 0.05 -b $i -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa -o ribotish/${j%%.bam}_pred.txt" ; done >> 02_ribotish_predict.sh
```

### RiboCode
```{bash}
# activate environment and prepare annotation
source /home/admin/env_mamba.sh
mamba activate ribocode
# prepare annotation
prepare_transcripts -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa -o ribocode/annot_human &
prepare_transcripts -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf -f split_data/Mus_musculus.GRCm39.dna.primary_assembly.fa -o ribocode/annot_mouse &

# estimate p-site offsets
for i in  split_data/human*.Aligned.toTranscriptome.out.*.bam ; do j=$(basename $i) ; echo "metaplots -a ribocode/annot_human -r $i -o ribocode/${j%%.bam}" ; done > 03_ribocode_metaplots.sh
for i in  split_data/mouse*.Aligned.toTranscriptome.out.*.bam ; do j=$(basename $i) ; echo "metaplots -a ribocode/annot_mouse -r $i -o ribocode/${j%%.bam}" ; done >> 03_ribocode_metaplots.sh

# Cannot run with default for mouse.BMDC.naive.RPF.r1. Use lower cutoff of f0_percent instead.
sed 's/-o ribocode\/mouse.BMDC.naive.RPF.r1/-f0_percent 0.5 -o ribocode\/mouse.BMDC.naive.RPF.r1/g' 03_ribocode_metaplots.sh

# predict
for i in  ribocode/human*.Aligned.toTranscriptome.out.1_pre_config.txt ; do j=$(basename $i) ; echo "RiboCode -a ribocode/annot_human -c $i -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o ribocode/${j%%.Aligned.toTranscriptome.out.1_pre_config.txt}_1" ; done > 03_ribocode_predict.sh
for i in  ribocode/human*.Aligned.toTranscriptome.out.2_pre_config.txt ; do j=$(basename $i) ; echo "RiboCode -a ribocode/annot_human -c $i -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o ribocode/${j%%.Aligned.toTranscriptome.out.2_pre_config.txt}_2" ; done >> 03_ribocode_predict.sh

for i in  ribocode/mouse*.Aligned.toTranscriptome.out.1_pre_config.txt ; do j=$(basename $i) ; echo "RiboCode -a ribocode/annot_mouse -c $i -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o ribocode/${j%%.Aligned.toTranscriptome.out.1_pre_config.txt}_1" ; done >> 03_ribocode_predict.sh
for i in  ribocode/mouse*.Aligned.toTranscriptome.out.2_pre_config.txt ; do j=$(basename $i) ; echo "RiboCode -a ribocode/annot_mouse -c $i -l no -g -s ATG -A CTG,GTG,TTG -m 5 -o ribocode/${j%%.Aligned.toTranscriptome.out.2_pre_config.txt}_2" ; done >> 03_ribocode_predict.sh
```

### PRICE
```{bash}
cd price
ln -s /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa
ln -s /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf

ln -s /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf 
ln -s /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa

# index genome
/home/admin/local/Gedi_1.0.5/gedi -e IndexGenome -s Homo_sapiens.GRCh38.dna.primary_assembly.fa -a Homo_sapiens.GRCh38.107.gtf -n hsa107 -nostar -nokallisto -nobowtie &
/home/admin/local/Gedi_1.0.5/gedi -e IndexGenome -s Mus_musculus.GRCm39.dna.primary_assembly.fa -a Mus_musculus.GRCm39.106.gtf -n mmu106 -nostar -nokallisto -nobowtie &

# predict
for i in split_data/human*.Aligned.sortedByCoord.out.1.bam ; do j=$(basename $i) ; echo "/home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 16 -fdr 0.05 -skipmt -reads $i -genomic hsa107 -prefix price/${j%%.Aligned.sortedByCoord.out.1.bam}_1" ; done > 04_price_predict.sh
for i in split_data/human*.Aligned.sortedByCoord.out.2.bam ; do j=$(basename $i) ; echo "/home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 16 -fdr 0.05 -skipmt -reads $i -genomic hsa107 -prefix price/${j%%.Aligned.sortedByCoord.out.2.bam}_2" ; done >> 04_price_predict.sh

for i in split_data/mouse*.Aligned.sortedByCoord.out.1.bam ; do j=$(basename $i) ; echo "/home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 16 -fdr 0.05 -skipmt -reads $i -genomic mmu106 -prefix price/${j%%.Aligned.sortedByCoord.out.1.bam}_1" ; done >> 04_price_predict.sh
for i in split_data/mouse*.Aligned.sortedByCoord.out.2.bam ; do j=$(basename $i) ; echo "/home/admin/local/Gedi_1.0.5/gedi -e Price -nthreads 16 -fdr 0.05 -skipmt -reads $i -genomic mmu106 -prefix price/${j%%.Aligned.sortedByCoord.out.2.bam}_2" ; done >> 04_price_predict.sh
```

### RibORF
```{bash}
# annotate ORFs
gtfToGenePred /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  riborf/Homo_sapiens.GRCh38.107.genePred.txt &
gtfToGenePred /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf riborf/Mus_musculus.GRCm39.106.genePred.txt &

mkdir riborf/annnot_human
mkdir riborf/annnot_mouse

perl /home/admin/local/RibORF.2.0/ORFannotate.pl -s "ATG/CTG/GTG/TTG" -l 18 -g /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa -t riborf/Homo_sapiens.GRCh38.107.genePred.txt -o riborf/annnot_human &
perl /home/admin/local/RibORF.2.0/ORFannotate.pl -s "ATG/CTG/GTG/TTG" -l 18 -g /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa -t riborf/Mus_musculus.GRCm39.106.genePred.txt -o riborf/annnot_mouse &
# -l: cutoff of minimum candidate ORF length (including stop codon)

# estimate p-site offset
for i in split_data/*.sam ; do j=$(basename $i) ; echo "mkdir riborf/${j%%.sam}" ; done > 05_riborf_mkdir.sh
sh 05_riborf_mkdir.sh
for i in split_data/human*.sam ; do j=$(basename $i) ; echo "perl /home/admin/local/RibORF.2.0/readDist.pl -f $i -g riborf/Homo_sapiens.GRCh38.107.genePred.txt -o riborf/${j%%.sam} -d 25,26,27,28,29,30,31,32,33,34" ; done > 05_riborf_readDist.sh
for i in split_data/mouse*.sam ; do j=$(basename $i) ; echo "perl /home/admin/local/RibORF.2.0/readDist.pl -f $i -g riborf/Mus_musculus.GRCm39.106.genePred.txt -o riborf/${j%%.sam} -d 25,26,27,28,29,30,31,32,33,33" ; done >> 05_riborf_readDist.sh

# run a script that estimates optimal read lengths to use with the ouput of the above step
for i in riborf/human* riborf/mouse* ; do j=$(basename $i) ; echo "Rscript --vanilla /home/admin/local/RibORF.1.0/offset_est.R $i" ; done > 05_riborf_offsetEst.sh

# psite offset correction
for i in riborf/human* riborf/mouse* ; do j=$(basename $i) ; echo "perl /home/admin/local/RibORF.1.0/offsetCorrect.pl -r split_data/$j.sam -p $i/offset.corretion.param -o split_data/$j.corrected.sam" ; done > 05_riborf_offsetCorrect.sh

# predict
for i in split_data/human*.corrected.sam ; do j=$(basename $i) ; echo "perl /home/admin/local/RibORF.2.0/ribORF.pl -f $i -c riborf/annnot_human/candidateORF.genepred.txt -o riborf/${j%%.corrected.sam}" ; done > 05_riborf_predict.sh
for i in split_data/mouse*.corrected.sam ; do j=$(basename $i) ; echo "perl /home/admin/local/RibORF.2.0/ribORF.pl -f $i -c riborf/annnot_mouse/candidateORF.genepred.txt -o riborf/${j%%.corrected.sam}" ; done >> 05_riborf_predict.sh
```

### RiboTricer
```{bash}
ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.44 --bam human.iPSC.normal.RPF.r3.Aligned.sortedByCoord.out.bam --ribotricer_index ntg_ribotricer/human_candidate_orfs.tsv --prefix ntg_ribotricer/human.iPSC.normal.RPF.r3

ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.418 --bam mouse.Liver.fasting.RPF.r1.Aligned.sortedByCoord.out.bam --ribotricer_index ntg_ribotricer/mouse_candidate_orfs.tsv --prefix ntg_ribotricer/mouse.Liver.fasting.RPF.r1

for i in split_data/human*.Aligned.sortedByCoord.out.1.bam ; do j=$(basename $i) ; echo "ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.44 --bam $i --ribotricer_index /nfs_data/zhangh/ncorf_benchmark/benchmark/ntg_ribotricer/human_candidate_orfs.tsv --prefix ribotricer/${j%%.Aligned.sortedByCoord.out.1.bam}_1" ; done > 06_ribotricer_predict.sh
for i in split_data/human*.Aligned.sortedByCoord.out.2.bam ; do j=$(basename $i) ; echo "ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.44 --bam $i --ribotricer_index /nfs_data/zhangh/ncorf_benchmark/benchmark/ntg_ribotricer/human_candidate_orfs.tsv --prefix ribotricer/${j%%.Aligned.sortedByCoord.out.2.bam}_2" ; done >> 06_ribotricer_predict.sh

for i in split_data/mouse*.Aligned.sortedByCoord.out.1.bam ; do j=$(basename $i) ; echo "ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.418 --bam $i --ribotricer_index /nfs_data/zhangh/ncorf_benchmark/benchmark/ntg_ribotricer/mouse_candidate_orfs.tsv --prefix ribotricer/${j%%.Aligned.sortedByCoord.out.1.bam}_1" ; done >> 06_ribotricer_predict.sh
for i in split_data/mouse*.Aligned.sortedByCoord.out.2.bam ; do j=$(basename $i) ; echo "ribotricer detect-orfs --stranded yes --phase_score_cutoff 0.418 --bam $i --ribotricer_index /nfs_data/zhangh/ncorf_benchmark/benchmark/ntg_ribotricer/mouse_candidate_orfs.tsv --prefix ribotricer/${j%%.Aligned.sortedByCoord.out.2.bam}_2" ; done >> 06_ribotricer_predict.sh
```

### Process prediction results of different methods using a unified pipeline with the same set of standards 
#### Classify ORFs into different types
```{bash}
# PRICE
for i in price/human*.orfs.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m price -p results/${j%%.orfs.tsv}_price $i /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv" ; done > 07_orf_type.sh
for i in price/mouse*.orfs.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m price -p results/${j%%.orfs.tsv}_price $i /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv" ; done >> 07_orf_type.sh

# RiboCode
for i in ribocode/human*_collapsed.txt ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribocode -p results/${j%%_collapsed.txt}_ribocode $i /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv" ; done >> 07_orf_type.sh
for i in ribocode/mouse*_collapsed.txt ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribocode -p results/${j%%_collapsed.txt}_ribocode $i /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv" ; done >> 07_orf_type.sh

# RiboTricer
for i in ribotricer/human*_translating_ORFs.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribotricer -p results/${j%%_translating_ORFs.tsv}_ribotricer $i /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv" ; done >> 07_orf_type.sh
for i in ribotricer/mouse*_translating_ORFs.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribotricer -p results/${j%%_translating_ORFs.tsv}_ribotricer $i /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv" ; done >> 07_orf_type.sh

# RiboTISH
for i in ribotish/human*_pred.txt ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribotish -p results/${j%%_pred.txt}_ribotish $i /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv" ; done >> 07_orf_type.sh
for i in ribotish/mouse*_pred.txt ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m ribotish -p results/${j%%_pred.txt}_ribotish $i /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv" ; done >> 07_orf_type.sh

# RibORF
for i in riborf/human* ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m riborf -p results/${j}_riborf $i /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv" ; done >> 07_orf_type.sh
for i in riborf/mouse* ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_type.py -m riborf -p results/${j}_riborf $i /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv" ; done >> 07_orf_type.sh
```

#### Obtain the bam files with the P-site offset tag estimated by PSite package.
```{bash}
for i in split_data/human*.Aligned.sortedByCoord.out.*.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.Aligned.sortedByCoord.out*}.psite.gbt.pickle psite/${j/.Aligned.sortedByCoord.out/.genome}" ; done > 08_psite_predict.sh
for i in split_data/mouse*.Aligned.sortedByCoord.out.*.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.Aligned.sortedByCoord.out*}.psite.gbt.pickle psite/${j/.Aligned.sortedByCoord.out/.genome}" ; done >> 08_psite_predict.sh

# generated matched genome bam splits for RiboCode
for i in  split_data/*Aligned.toTranscriptome.out.1.bam ; do j=$(basename $i) ; echo "python bam_split_match.py /nfs_data/zhangh/ncorf_benchmark/benchmark/${j%%.Aligned.toTranscriptome.out*}.Aligned.sortedByCoord.out.bam $i ${i%%1.bam}2.bam -p split_data/ribocode_bam/${j%%.Aligned.toTranscriptome.out*}" ; done > 08_ribocode_genomebam.sh

## predict
for i in split_data/ribocode_bam/human*.1.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.1.bam}.psite.gbt.pickle psite/ribocode_psite/${j%%.1.bam}.genome.psite.1.bam" ; done > 08_psite_ribocode_predict.sh
for i in split_data/ribocode_bam/human*.2.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.2.bam}.psite.gbt.pickle psite/ribocode_psite/${j%%.2.bam}.genome.psite.2.bam" ; done >> 08_psite_ribocode_predict.sh

for i in split_data/ribocode_bam/mouse*.1.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.1.bam}.psite.gbt.pickle psite/ribocode_psite/${j%%.1.bam}.genome.psite.1.bam" ; done >> 08_psite_ribocode_predict.sh
for i in split_data/ribocode_bam/mouse*.2.bam ; do j=$(basename $i) ; echo "psite predict /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.dna.primary_assembly.fa $i /nfs_data/zhangh/ncorf_benchmark/benchmark/psite_cov/${j%%.2.bam}.psite.gbt.pickle psite/ribocode_psite/${j%%.2.bam}.genome.psite.2.bam" ; done >> 08_psite_ribocode_predict.sh
```

#### Quantify the predicted ORFs
```{bash}
for i in psite/*.bam ; do echo "psite coverage $i ${i%%.bam}" ; done > 09_orf_quant_coverage.sh

for i in psite/ribocode_psite/*.bam ; do echo "psite coverage $i ${i%%.bam}" ; done >> 09_orf_quant_coverage.sh
# price
for i in results/human*_1_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_1_price_processed.tsv/.genome.1_fw.bw} psite/${j/_1_price_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done > 09_orf_quant.sh
for i in results/human*_2_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_2_price_processed.tsv/.genome.2_fw.bw} psite/${j/_2_price_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_1_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_1_price_processed.tsv/.genome.1_fw.bw} psite/${j/_1_price_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_2_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_2_price_processed.tsv/.genome.2_fw.bw} psite/${j/_2_price_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh

# ribotish
for i in results/human*.Aligned.sortedByCoord.out.1_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/.genome.1_fw.bw} psite/${j/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}_1_ribotish_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/human*.Aligned.sortedByCoord.out.2_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/.genome.2_fw.bw} psite/${j/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}_2_ribotish_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*.Aligned.sortedByCoord.out.1_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/.genome.1_fw.bw} psite/${j/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}_1_ribotish_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*.Aligned.sortedByCoord.out.2_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/.genome.2_fw.bw} psite/${j/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}_2_ribotish_orfquant.tsv" ; done >> 09_orf_quant.sh

# ribotricer
for i in results/human*_1_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_1_ribotricer_processed.tsv/.genome.1_fw.bw} psite/${j/_1_ribotricer_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/human*_2_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_2_ribotricer_processed.tsv/.genome.2_fw.bw} psite/${j/_2_ribotricer_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_1_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_1_ribotricer_processed.tsv/.genome.1_fw.bw} psite/${j/_1_ribotricer_processed.tsv/.genome.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_2_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/${j/_2_ribotricer_processed.tsv/.genome.2_fw.bw} psite/${j/_2_ribotricer_processed.tsv/.genome.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh

# ribocode
for i in results/human*_1_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/_1_ribocode_processed.tsv/.genome.psite.1_fw.bw} psite/ribocode_psite/${j/_1_ribocode_processed.tsv/.genome.psite.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/human*_2_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/_2_ribocode_processed.tsv/.genome.psite.2_fw.bw} psite/ribocode_psite/${j/_2_ribocode_processed.tsv/.genome.psite.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_1_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/_1_ribocode_processed.tsv/.genome.psite.1_fw.bw} psite/ribocode_psite/${j/_1_ribocode_processed.tsv/.genome.psite.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*_2_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/_2_ribocode_processed.tsv/.genome.psite.2_fw.bw} psite/ribocode_psite/${j/_2_ribocode_processed.tsv/.genome.psite.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh

# riborf
for i in results/human*.1_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/.1_riborf_processed.tsv/.genome.psite.1_fw.bw} psite/ribocode_psite/${j/.1_riborf_processed.tsv/.genome.psite.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/human*.2_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/.2_riborf_processed.tsv/.genome.psite.2_fw.bw} psite/ribocode_psite/${j/.2_riborf_processed.tsv/.genome.psite.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*.1_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/.1_riborf_processed.tsv/.genome.psite.1_fw.bw} psite/ribocode_psite/${j/.1_riborf_processed.tsv/.genome.psite.1_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
for i in results/mouse*.2_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_quant.py psite/ribocode_psite/${j/.2_riborf_processed.tsv/.genome.psite.2_fw.bw} psite/ribocode_psite/${j/.2_riborf_processed.tsv/.genome.psite.2_rc.bw} /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.transcripts.bed12 $i -o ${i%%_processed.tsv}_orfquant.tsv" ; done >> 09_orf_quant.sh
```

#### Compute Fragment Length Organization Similarity Score (FLOSS)
```{bash}
# floss
for i in psite/*.bam ; do echo "samtools index $i " ; done > 10_psite_genome_index.sh
for i in psite/ribocode_psite/*.bam ; do echo "samtools index $i " ; done >> 10_psite_genome_index.sh
## price
for i in results/human*_1_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_1_price_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done > 10_orf_floss.sh
for i in results/human*_2_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_2_price_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_1_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_1_price_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_2_price_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_2_price_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh

## ribotish
for i in results/human*.Aligned.sortedByCoord.out.1_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}_1_ribotish_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/human*.Aligned.sortedByCoord.out.2_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}_2_ribotish_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*.Aligned.sortedByCoord.out.1_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%.Aligned.sortedByCoord.out.1_ribotish_processed.tsv}_1_ribotish_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*.Aligned.sortedByCoord.out.2_ribotish_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%.Aligned.sortedByCoord.out.2_ribotish_processed.tsv}_2_ribotish_floss.tsv" ; done >> 10_orf_floss.sh

## riborf
for i in results/human*.1_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.1_riborf_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%.1_riborf_processed.tsv}_1_riborf_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/human*.2_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.2_riborf_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%.2_riborf_processed.tsv}_2_riborf_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*.1_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.1_riborf_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%.1_riborf_processed.tsv}_1_riborf_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*.2_riborf_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%.2_riborf_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%.2_riborf_processed.tsv}_2_riborf_floss.tsv" ; done >> 10_orf_floss.sh

## ribotricer
for i in results/human*_1_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_1_ribotricer_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/human*_2_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_2_ribotricer_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_1_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_1_ribotricer_processed.tsv}.genome.1.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_2_ribotricer_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/${j%%_2_ribotricer_processed.tsv}.genome.2.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh

## ribocode
for i in results/human*_1_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/ribocode_psite/${j%%_1_ribocode_processed.tsv}.genome.psite.1.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/human*_2_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/ribocode_psite/${j%%_2_ribocode_processed.tsv}.genome.psite.2.bam /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.107.gtf  /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/txinfo_human_ens107.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Homo_sapiens.GRCh38.107.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_1_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/ribocode_psite/${j%%_1_ribocode_processed.tsv}.genome.psite.1.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh
for i in results/mouse*_2_ribocode_processed.tsv ; do j=$(basename $i) ; echo "python ~admin/scripts/orf_floss.py psite/ribocode_psite/${j%%_2_ribocode_processed.tsv}.genome.psite.2.bam /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.106.gtf  /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/txinfo_mouse_ens106.tsv /nfs_data/zhangh/ncorf_benchmark/benchmark/genome_annot/Mus_musculus.GRCm39.106.cdsmerge.bed $i -o ${i%%_processed.tsv}_floss.tsv" ; done >> 10_orf_floss.sh

# floss cutoff
for i in results/*_floss.tsv ; do echo "Rscript --vanilla ~admin/scripts/orf_floss_cutoff.R $i ${i%%.tsv}_cutoff.tsv" ; done > 10_orf_floss_cutoff.sh
```

#### Extract Kozak sequence context for predicted ORFs
```{bash}
for i in results/human*_floss.tsv ; do echo "python ~admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.cdna.all.fa.gz -f /nfs_data/database/ref_genomes/human_GRCh38p13/ens107/Homo_sapiens.GRCh38.ncrna.fa.gz ${i%%_floss.tsv}_processed.tsv > ${i%%_floss.tsv}_kozak.tsv" ; done > 11_orf_kozak.sh
for i in results/mouse*_floss.tsv ; do echo "python ~admin/scripts/orf_kozak.py -i -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.cdna.all.fa.gz -f /nfs_data/database/ref_genomes/mouse_GRCm39/ens106/Mus_musculus.GRCm39.ncrna.fa.gz ${i%%_floss.tsv}_processed.tsv > ${i%%_floss.tsv}_kozak.tsv" ; done >> 11_orf_kozak.sh

sed 's/_1_riborf_processed.tsv/.1_riborf_processed.tsv/g' 11_orf_kozak.sh | sed 's/_2_riborf_processed.tsv/.2_riborf_processed.tsv/g' | sed 's/_1_ribotish_processed.tsv/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/g' | sed 's/_2_ribotish_processed.tsv/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/g' > 11_orf_kozak_fine.sh
```

#### Merge annotation results
```{bash}
for i in results/*_floss_cutoff.tsv ; do echo "python ~admin/scripts/orf_mergetab.py ${i%%_floss_cutoff.tsv}_processed.tsv -q ${i%%_floss_cutoff.tsv}_orfquant.tsv -f $i -k ${i%%_floss_cutoff.tsv}_kozak.tsv -o ${i%%_floss_cutoff.tsv}_merge.tsv" ; done > 12_orf_merge.sh

sed 's/_1_riborf_processed.tsv/.1_riborf_processed.tsv/g' 12_orf_merge.sh | sed 's/_2_riborf_processed.tsv/.2_riborf_processed.tsv/g' | sed 's/_1_ribotish_processed.tsv/.Aligned.sortedByCoord.out.1_ribotish_processed.tsv/g' | sed 's/_2_ribotish_processed.tsv/.Aligned.sortedByCoord.out.2_ribotish_processed.tsv/g' | sed 's/_1_riborf_orfquant.tsv/.1_riborf_orfquant.tsv/g' | sed 's/_2_riborf_orfquant.tsv/.2_riborf_orfquant.tsv/g' > 12_orf_merge_fine.sh
```

## Summary
```{r}
library(data.table)
library(tidyverse)
library(patchwork)
library(forcats)
library(glue)
library(stringi)
library(stringr)
library(readxl)

## Read transcript annotations
appris_tsl_human <- fread('saturation/human_mart_export.txt')
setnames(appris_tsl_human, c('gene_id', 'tx_name', 'appris', 'tsl'))

appris_tsl_human[, tsl := sub(' .*', '', tsl)]
appris_tsl_human[, tsl := factor(ifelse(tsl == '', 'tslNA', tsl))]
appris_tsl_human[, appris := factor(appris, levels = c(
  c("principal1", "principal2", "principal3", "principal4", "principal5",
    "alternative1", "alternative2", "")))]

appris_tsl_mouse <- fread('saturation/mouse_mart_export.txt')
setnames(appris_tsl_mouse, c('gene_id', 'tx_name', 'appris', 'tsl'))
appris_tsl_mouse[, tsl := sub(' .*', '', tsl)]
appris_tsl_mouse[, tsl := factor(ifelse(tsl == '', 'tslNA', tsl))]
appris_tsl_mouse[, appris := factor(appris, levels = c(
  c("principal1", "principal2", "principal3", "principal4", "principal5",
    "alternative1", "alternative2", "")))]

get_ncorfs <- function(xpath){
  # exclude annotated CDSs or truncation/extension variants
  type_cds <- c(
    'CDS', 'C_extension', 'C_truncation', 'N_extension',
    'N_truncation', 'sCDS', 'iCDS', 'wCDS')
  type_ncorf <- c('uORF', 'uoORF', 'iORF', 'doORF', 'dORF', 'lncRNA-ORF')
  dtt <- fread(xpath)
  dtt[, uuid := glue_data(.SD, '{chrom}_{gstart}_{gend}_{orf_len}{strand}')]
  cds_variants <- dtt[orf_type %in% type_cds]
  orfs <- dtt[!uuid %in% cds_variants$uuid]
  orfs <- orfs[orf_type %in% type_ncorf]
  orfs <- orfs[psite_total >= 10 & psite_total / n_codon >= 0.5]
  
  # assign ORFs to a single transcript based on appris/tsl score
  if(grepl('human', xpath)){
    orfs <- merge(orfs, appris_tsl_human, by = c('gene_id', 'tx_name'))
  }else{
    orfs <- merge(orfs, appris_tsl_mouse, by = c('gene_id', 'tx_name'))
  }
  orfs <- orfs[order(gene_id, appris, tsl, tx_name)]
  orfs <- orfs[!duplicated(uuid)]
  
  # merge ORFs that are in the same transcripts and have the same stop codon
  # keep the most upstream best-tier start codons
  orfs[, start_tier := fct_collapse(
    start_codon, AUG = 'ATG', SUG = c('CTG', 'GTG'),
    UUG = 'TTG', other_level = 'other')]
  orfs <- orfs[order(tx_name, tend, start_tier, tstart)]
  orfs <- unique(orfs, by = c('tx_name', 'tend'))
  # exclude non-NTG start codons (mainly from PRICE,
  # which doesn't allow setting candidate start codons)
  orfs <- orfs[start_codon %in% c('ATG', 'CTG', 'GTG', 'TTG')]
  return(orfs)
}

processed_files <- list.files('split_bam/results', pattern = '_merge.tsv', full.names = TRUE)
names(processed_files) <- sub(r'(_merge.tsv)', '', basename(processed_files))

split_dtts <- lapply(processed_files, get_ncorfs)

for (i in names(split_dtts)) {
  split_dtts[i][[1]]$chrom <- as.character(split_dtts[i][[1]]$chrom)
}

split_dtt <- bind_rows(split_dtts, .id = 'file_info') |>
  separate(file_info, c('library', 'split', 'method'), sep = '_') 
write_tsv(split_dtt, 'split_bam/results/all_split_orf.tsv')
```

## Visualize annotation results
```{r}
## Display the similarity of ORFs predicted from two random splits by different methods
library(tidyverse)
split_orf <- read_tsv('data/split_bam/all_split_orf.tsv')
split_orf <- split_orf |>
    mutate(method = case_when(
    method == 'ribotricer' ~ 'RiboTricer', 
    method == 'ribocode' ~ 'RiboCode', 
    method == 'ribotish' ~ 'Ribo-TISH', 
    method == 'riborf' ~ 'RibORF', 
    method == 'price' ~ 'PRICE', 
    .default = method))
split_name <- unique(split_orf$library)

split_jaccard <- NULL
for (orf_method in unique(split_orf$method)) {
  
  for (i in split_name) {
    split_tmp <- split_orf |>
      filter(method == orf_method, 
             library == i) |>
      distinct(library, split, uuid)
    
    file_1 <- split_tmp |>
      filter(split == 1)
    file_2 <- split_tmp |>
      filter(split == 2)
    common_ORF <- file_1 |> 
      filter(uuid %in% file_2$uuid)
    total_num <- n_distinct(split_tmp$uuid)
    
    split_jaccard <- rbind(split_jaccard, c(i, nrow(file_1), nrow(file_2), 
                                nrow(common_ORF), total_num, nrow(common_ORF)/total_num, 
                                orf_method))
      
    }
}
split_jaccard <- as.tibble(split_jaccard) |>
  mutate(split_name = V1, jaccard = V6, method = V7) |>
  mutate(jaccard = as.numeric(jaccard))

p1 <- ggplot(split_jaccard, aes(method, jaccard, fill = method)) +
  geom_boxplot() +
  scale_fill_brewer(palette = 'Dark2') +
  xlab(NULL) +
  ylab('Jaccard index') +
  theme_classic(base_size = 15) +
  theme(strip.background = element_blank(), 
        axis.text = element_text(colour = 'black')) +
  guides(fill = F)
ggsave(p1, 'data/saturation/results/split_boxplot.pdf')

## Distinguish between different ORF types
split_jaccard_orf_type <- NULL
for (orf_method in unique(split_orf$method)) {
  
  for (i in split_name) {
    split_tmp <- split_orf |>
      filter(method == orf_method, 
             library == i) |>
      distinct(library, split, uuid, orf_type)
    for (j in unique(split_orf$orf_type)) {
      file_1 <- split_tmp |>
        filter(orf_type == j, 
               split == 1)
      file_2 <- split_tmp |>
        filter(orf_type == j, 
               split == 2)
      common_ORF <- file_1 |> 
        filter(uuid %in% file_2$uuid)
      total_num <- n_distinct(split_tmp$uuid)
    
      split_jaccard_orf_type <- rbind(split_jaccard_orf_type, c(i, nrow(file_1), nrow(file_2), 
                                nrow(common_ORF), total_num, nrow(common_ORF)/total_num, 
                                orf_method, j))
    }
    }
}
split_jaccard_orf_type <- as.tibble(split_jaccard_orf_type) |>
  mutate(split_name = V1, jaccard = V6, method = V7, 
         orf_type = ifelse(V8 == 'lncRNA-ORF', 'lncORF', V8), 
         orf_type = factor(orf_type, levels = c('lncORF', 'uORF', 'uoORF', 'iORF', 'doORF', 'dORF'))) |>
  mutate(jaccard = as.numeric(jaccard))

ggplot(split_jaccard_orf_type, aes(y = fct_rev(method), jaccard, fill = method)) +
  geom_boxplot(show.legend = F) +
  scale_fill_brewer(palette = 'Dark2') +
  facet_wrap(vars(orf_type), scales = 'free_x', nrow = 1) +
  ylab(NULL) +
  xlab('Jaccard index') +
  theme_classic(base_size = 15) +
  theme(strip.background = element_blank(), 
        axis.text = element_text(colour = 'black'))
ggsave('data/saturation/figure/split_boxplot_orf_type.pdf', height = 3, width = 12)

## Using a higher cutoff of P-sites per codon
split_coverage <- split_orf |>
  mutate(coverage = psite_total/n_codon) |>
  filter(coverage >= 10)

split_coverage_jaccard <- NULL
for (orf_method in unique(split_coverage$method)) {
  
  for (i in split_name) {
    split_tmp <- split_coverage |>
      filter(method == orf_method, 
             library == i) |>
      distinct(library, split, uuid)
    
    file_1 <- split_tmp |>
      filter(split == 1)
    file_2 <- split_tmp |>
      filter(split == 2)
    common_ORF <- file_1 |> 
      filter(uuid %in% file_2$uuid)
    total_num <- n_distinct(split_tmp$uuid)
    
    split_coverage_jaccard <- rbind(split_coverage_jaccard, c(i, nrow(file_1), nrow(file_2), 
                                nrow(common_ORF), total_num, nrow(common_ORF)/total_num, 
                                orf_method))
      
    }
}
split_coverage_jaccard <- as.tibble(split_coverage_jaccard) |>
  mutate(split_name = V1, jaccard = V6, method = V7) |>
  mutate(jaccard = as.numeric(jaccard))

p2 <- ggplot(split_coverage_jaccard, aes(method, jaccard, fill = method)) +
  geom_boxplot() +
  scale_fill_brewer(palette = 'Dark2') +
  xlab(NULL) +
  ylab('Jaccard index') +
  theme_classic(base_size = 15) +
  theme(strip.background = element_blank(), 
        axis.text = element_text(colour = 'black')) +
  guides(fill = F)
ggsave(p2, 'data/saturation/results/split_boxplot_coverage10.pdf')

## 10 > coverage > 0.5
split_coverage_less10 <- split_orf |>
  mutate(coverage = psite_total/n_codon) |>
  filter(coverage < 10)

split_coverage_less10_jaccard <- NULL
for (orf_method in unique(split_coverage_less10$method)) {
  for (i in split_name) {
    split_tmp <- split_coverage_less10 |>
      filter(method == orf_method, 
             library == i) |>
      distinct(library, split, uuid)
    
    file_1 <- split_tmp |>
      filter(split == 1)
    file_2 <- split_tmp |>
      filter(split == 2)
    common_ORF <- file_1 |> 
      filter(uuid %in% file_2$uuid)
    total_num <- n_distinct(split_tmp$uuid)
    
    split_coverage_less10_jaccard <- rbind(split_coverage_less10_jaccard, c(i, nrow(file_1), nrow(file_2), 
                                nrow(common_ORF), total_num, nrow(common_ORF)/total_num, 
                                orf_method))
    }
}
split_coverage_less10_jaccard <- as.tibble(split_coverage_less10_jaccard) |>
  mutate(split_name = V1, jaccard = V6, method = V7) |>
  mutate(jaccard = as.numeric(jaccard))

split_coverage_jaccard$type <- '>=10'
split_coverage_less10_jaccard$type <- '<10'
plt <- rbind(split_coverage_jaccard, split_coverage_less10_jaccard)

ggplot(plt, aes(x = type, y = jaccard, fill = type)) +
  geom_line(aes(group = split_name), color = 'grey') +
  geom_boxplot(show.legend = FALSE) +
  scale_fill_brewer(palette = 'Paired') +
  facet_wrap(vars(method), nrow = 1, scales = 'free') +
  labs(x = 'P-sites/codon', y = 'Jaccard index') +
  theme_classic(base_size = 12) +
  theme(strip.background = element_blank(), 
        axis.text = element_text(colour = 'black')) 
ggsave('data/saturation/figure/splits_jaccard_vs_psite_per_codon.pdf', width = 8, height = 4)

plt |>
  pivot_wider(id_cols = c(method, split_name), names_from = type, values_from = jaccard) |> 
  summarise(pvalue = wilcox.test(`>=10`, `<10`, paired = TRUE)$p.value, .by = method)

## Evaluate the similarity of predictions using different biological replicates（Brain, Liver, and Testis）
plt_rep <- read_tsv('data/saturation/results/rep_total_jaccard.tsv') |>
  mutate(sample = str_to_title(sample), 
         method = factor(method, levels = c('RiboTricer', 'RibORF', 'RiboCode', 'Ribo-TISH', 'PRICE')))

p3 <- ggplot(plt_rep, aes(y = method, x = Jaccard, fill = method)) +
  geom_boxplot(show.legend = F) +
  scale_fill_brewer(direction = -1, palette = 'Dark2') +
  facet_grid(rows = vars(species), cols = vars(sample)) +
  ylab(NULL) +
  xlab('Jaccard index') +
  theme_classic(base_size = 15) +
  theme(strip.background = element_blank(), 
        axis.text = element_text(colour = 'black')) 
library(patchwork)
p1 <- p1 + theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
p2 <- p2 + theme(axis.text.x = element_text(angle = 30, vjust = 1, hjust = 1))
p1 / p2 | p3 | plot_layout(widths = c(1, 2.5))
ggsave('data/saturation/figure/split_rep_combination.pdf', height = 6, width = 12)
```
